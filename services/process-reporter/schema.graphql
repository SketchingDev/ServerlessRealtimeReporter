type Mutation {
	createProcess(id: ID!, name: String!, created: AWSTimestamp!): Process!
	addTask(id: String!, processId: ID!, name: String! created: AWSTimestamp!): Task!
	updateTask(id: ID!, updated: AWSTimestamp!, status: TaskStatus!, failureReason: String): Task!
}

type Query {
	getAllProcesses: [Process]!
    getProcess(id: ID!): Process
}

enum TaskStatus {
	PENDING,
	SUCCESS,
	FAILURE
}

type Process {
	id: ID!
	name: String!
	created: AWSTimestamp!
	tasks: [Task]!
}

type Task {
	id: String!
	processId: ID!
	name: String
	created: AWSTimestamp!
	updated: AWSTimestamp!
	status: TaskStatus!
	failureReason: String
}

type Subscription {
	onCreateProcess: Process
	@aws_subscribe(mutations: ["createProcess"])
	onAddOrUpdateTask: Task
	@aws_subscribe(mutations: ["addTask", "updateTask"])
}

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
