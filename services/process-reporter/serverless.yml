service:
  name: process-reporter

plugins:
  - serverless-stage-manager
  - serverless-appsync-plugin
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs10.x
  stage: ${opt:stage, 'dev'}
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:DeleteMessage
        - sqs:ReceiveMessage
      Resource: { Fn::GetAtt: [ CreateProcessQueue, Arn ] }

functions:
  processCreator:
    handler: handler.processCreator
    environment:
      REGION: { "Ref": "AWS::Region" }
      GRAPHQL_API_URL: { Fn::GetAtt: [GraphQlApi, GraphQLUrl] }
      GRAPHQL_API_KEY: { Fn::GetAtt: [GraphQlApiKeyDefault, ApiKey] }
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CreateProcessQueue
              - Arn

custom:
  stages:
    - dev
    - test
  appSyncName: process-reporter-${self:provider.stage}
  dynamodbProcessTableName: process-reporter-process-${self:provider.stage}
  dynamodbTaskTableName: process-reporter-task-${self:provider.stage}
  processDataSourceName: processes_datasource_${self:provider.stage}
  taskDataSourceName: tasks_datasource_${self:provider.stage}
  queueName: process-reporter-${self:provider.stage}-create-process-queue

  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  appSync:
    name: ${self:custom.appSyncName}
    authenticationType: API_KEY
    serviceRole: "${self:custom.appSyncName}-AppSyncServiceRole"
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] }
      level: ALL # Logging Level: NONE | ERROR | ALL
    mappingTemplates:
      - dataSource: ${self:custom.processDataSourceName}
        type: Mutation
        field: createProcess
        request: "createProcess-request-mapping-template.vtl"
        response: "createProcess-response-mapping-template.vtl"
      - dataSource: ${self:custom.processDataSourceName}
        type: Query
        field: getProcess
        request: "getProcess-request-mapping-template.vtl"
        response: "getProcess-response-mapping-template.vtl"
      - dataSource: ${self:custom.processDataSourceName}
        type: Query
        field: getAllProcesses
        request: "getAllProcesses-request-mapping-template.vtl"
        response: "getAllProcesses-response-mapping-template.vtl"
      - dataSource: ${self:custom.taskDataSourceName}
        type: Mutation
        field: addTask
        request: "addTask-request-mapping-template.vtl"
        response: "addTask-response-mapping-template.vtl"
      - dataSource: ${self:custom.taskDataSourceName}
        type: Mutation
        field: updateTask
        request: "updateTask-request-mapping-template.vtl"
        response: "updateTask-response-mapping-template.vtl"
      - dataSource: ${self:custom.taskDataSourceName}
        type: Process
        field: tasks
        request: "processTasks-request-mapping-template.vtl"
        response: "processTasks-response-mapping-template.vtl"
    dataSources:
      - type: AMAZON_DYNAMODB
        name: ${self:custom.processDataSourceName}
        description: "Processes table"
        config:
          tableName: { Ref: ProcessTable }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: ${self:custom.taskDataSourceName}
        description: "Tasks table"
        config:
          tableName: { Ref: TaskTable }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }

resources:
  Resources:
    CreateProcessQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: ${self:custom.queueName}
        MessageRetentionPeriod: 120
        VisibilityTimeout: 60

    CreateProcessQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "allow-sqs-messages"
              Effect: Allow
              Principal: "*"
              Resource: !GetAtt
                - CreateProcessQueue
                - Arn
              Action: "SQS:SendMessage"
              Condition:
                StringEquals:
                  aws:SourceAccount: !Ref "AWS::AccountId"
        Queues:
          - Ref: CreateProcessQueue

    ProcessTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.dynamodbProcessTableName}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    TaskTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.dynamodbTaskTableName}
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    AppSyncDynamoDBServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "DynamoDB-${self:custom.appSync.serviceRole}"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "DynamoDB-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "dynamodb:Query"
                    - "dynamodb:BatchWriteItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:DeleteItem"
                    - "dynamodb:PutItem"
                    - "dynamodb:Scan"
                    - "dynamodb:UpdateItem"
                  Resource:
                    - Fn::Join: ["", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { Ref: "AWS::AccountId" }, ":table/", "${self:custom.dynamodbProcessTableName}" ]]
                    - Fn::Join: ["", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { Ref: "AWS::AccountId" }, ":table/", "${self:custom.dynamodbProcessTableName}", "/*" ]]
                    - Fn::Join: ["", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { Ref: "AWS::AccountId" }, ":table/", "${self:custom.dynamodbTaskTableName}" ]]
                    - Fn::Join: ["", [ "arn:aws:dynamodb:", { "Ref": "AWS::Region" }, ":", { Ref: "AWS::AccountId" }, ":table/", "${self:custom.dynamodbTaskTableName}", "/*" ]]
    AppSyncLoggingServiceRole:
      Type: "AWS::IAM::Role"
      Properties:
        RoleName: "CloudWatch-${self:custom.appSync.serviceRole}-Role"
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Service:
                  - "appsync.amazonaws.com"
              Action:
                - "sts:AssumeRole"
        Policies:
          - PolicyName: "CloudWatch-${self:custom.appSync.serviceRole}-Policy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: "Allow"
                  Action:
                    - "logs:*"
                  Resource:
                    - "*"
  Outputs:
    QueueName:
      Description: "Name of queue"
      Value: ${self:custom.queueName}
